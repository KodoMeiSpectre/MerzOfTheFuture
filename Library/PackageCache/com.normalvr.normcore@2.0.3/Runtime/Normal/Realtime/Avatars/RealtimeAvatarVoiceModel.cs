using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Normal.Realtime {
    [RealtimeModel] public partial class RealtimeAvatarVoiceModel {
        [RealtimeProperty(1, true, true)] private int _clientID = -1;
        [RealtimeProperty(2, true, true)] private int _streamID = -1;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Normal.Realtime {
    public partial class RealtimeAvatarVoiceModel : RealtimeModel {
        public int clientID {
            get {
                return _cache.LookForValueInCache(_clientID, entry => entry.clientIDSet, entry => entry.clientID);
            }
            set {
                if (clientID == value) return;
                _cache.UpdateLocalCache(entry => { entry.clientIDSet = true; entry.clientID = value; return entry; });
                InvalidateReliableLength();
                FireClientIDDidChange(value);
            }
        }
        
        public int streamID {
            get {
                return _cache.LookForValueInCache(_streamID, entry => entry.streamIDSet, entry => entry.streamID);
            }
            set {
                if (streamID == value) return;
                _cache.UpdateLocalCache(entry => { entry.streamIDSet = true; entry.streamID = value; return entry; });
                InvalidateReliableLength();
                FireStreamIDDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(RealtimeAvatarVoiceModel model, T value);
        public event PropertyChangedHandler<int> clientIDDidChange;
        public event PropertyChangedHandler<int> streamIDDidChange;
        
        private struct LocalCacheEntry {
            public bool clientIDSet;
            public int clientID;
            public bool streamIDSet;
            public int streamID;
        }
        
        private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
        
        public enum PropertyID : uint {
            ClientID = 1,
            StreamID = 2,
        }
        
        public RealtimeAvatarVoiceModel() : this(null) {
        }
        
        public RealtimeAvatarVoiceModel(RealtimeModel parent) : base(null, parent) {
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            UnsubscribeClearCacheCallback();
        }
        
        private void FireClientIDDidChange(int value) {
            try {
                clientIDDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireStreamIDDidChange(int value) {
            try {
                streamIDDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            int length = 0;
            if (context.fullModel) {
                FlattenCache();
                length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientID, (uint)_clientID);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.StreamID, (uint)_streamID);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.clientIDSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.ClientID, (uint)entry.clientID);
                }
                if (entry.streamIDSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.StreamID, (uint)entry.streamID);
                }
            }
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var didWriteProperties = false;
            
            if (context.fullModel) {
                stream.WriteVarint32((uint)PropertyID.ClientID, (uint)_clientID);
                stream.WriteVarint32((uint)PropertyID.StreamID, (uint)_streamID);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.clientIDSet || entry.streamIDSet) {
                    _cache.PushLocalCacheToInflight(context.updateID);
                    ClearCacheOnStreamCallback(context);
                }
                if (entry.clientIDSet) {
                    stream.WriteVarint32((uint)PropertyID.ClientID, (uint)entry.clientID);
                    didWriteProperties = true;
                }
                if (entry.streamIDSet) {
                    stream.WriteVarint32((uint)PropertyID.StreamID, (uint)entry.streamID);
                    didWriteProperties = true;
                }
                
                if (didWriteProperties) InvalidateReliableLength();
            }
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                switch (propertyID) {
                    case (uint)PropertyID.ClientID: {
                        int previousValue = _clientID;
                        _clientID = (int)stream.ReadVarint32();
                        bool clientIDExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.clientIDSet);
                        if (!clientIDExistsInChangeCache && _clientID != previousValue) {
                            FireClientIDDidChange(_clientID);
                        }
                        break;
                    }
                    case (uint)PropertyID.StreamID: {
                        int previousValue = _streamID;
                        _streamID = (int)stream.ReadVarint32();
                        bool streamIDExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.streamIDSet);
                        if (!streamIDExistsInChangeCache && _streamID != previousValue) {
                            FireStreamIDDidChange(_streamID);
                        }
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
            }
        }
        
        #region Cache Operations
        
        private StreamEventDispatcher _streamEventDispatcher;
        
        private void FlattenCache() {
            _clientID = clientID;
            _streamID = streamID;
            _cache.Clear();
        }
        
        private void ClearCache(uint updateID) {
            _cache.RemoveUpdateFromInflight(updateID);
        }
        
        private void ClearCacheOnStreamCallback(StreamContext context) {
            if (_streamEventDispatcher != context.dispatcher) {
                UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
            }
            _streamEventDispatcher = context.dispatcher;
            _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
        }
        
        private void UnsubscribeClearCacheCallback() {
            if (_streamEventDispatcher != null) {
                _streamEventDispatcher.RemoveStreamCallback(ClearCache);
                _streamEventDispatcher = null;
            }
        }
        
        #endregion
    }
}
/* ----- End Normal Autogenerated Code ----- */
