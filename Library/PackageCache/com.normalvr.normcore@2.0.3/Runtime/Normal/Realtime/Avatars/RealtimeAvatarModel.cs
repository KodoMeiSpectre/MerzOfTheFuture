using System;
using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Normal.Realtime {
    [RealtimeModel] public partial class RealtimeAvatarModel {
        // Property 1 bitflag transitioned to 4/5/6 bools
        [RealtimeProperty(2, true)] private RealtimeAvatar.DeviceType _deviceType;
        [RealtimeProperty(3, true)] private string _deviceModel;
        [RealtimeProperty(4, true, true)] private bool _headActive;
        [RealtimeProperty(5, true, true)] private bool _leftHandActive;
        [RealtimeProperty(6, true, true)] private bool _rightHandActive;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Normal.Realtime {
    public partial class RealtimeAvatarModel : RealtimeModel {
        public Normal.Realtime.RealtimeAvatar.DeviceType deviceType {
            get {
                return _cache.LookForValueInCache(_deviceType, entry => entry.deviceTypeSet, entry => entry.deviceType);
            }
            set {
                if (deviceType == value) return;
                _cache.UpdateLocalCache(entry => { entry.deviceTypeSet = true; entry.deviceType = value; return entry; });
                InvalidateReliableLength();
            }
        }
        
        public string deviceModel {
            get {
                return _cache.LookForValueInCache(_deviceModel, entry => entry.deviceModelSet, entry => entry.deviceModel);
            }
            set {
                if (deviceModel == value) return;
                _cache.UpdateLocalCache(entry => { entry.deviceModelSet = true; entry.deviceModel = value; return entry; });
                InvalidateReliableLength();
            }
        }
        
        public bool headActive {
            get {
                return _cache.LookForValueInCache(_headActive, entry => entry.headActiveSet, entry => entry.headActive);
            }
            set {
                if (headActive == value) return;
                _cache.UpdateLocalCache(entry => { entry.headActiveSet = true; entry.headActive = value; return entry; });
                InvalidateReliableLength();
                FireHeadActiveDidChange(value);
            }
        }
        
        public bool leftHandActive {
            get {
                return _cache.LookForValueInCache(_leftHandActive, entry => entry.leftHandActiveSet, entry => entry.leftHandActive);
            }
            set {
                if (leftHandActive == value) return;
                _cache.UpdateLocalCache(entry => { entry.leftHandActiveSet = true; entry.leftHandActive = value; return entry; });
                InvalidateReliableLength();
                FireLeftHandActiveDidChange(value);
            }
        }
        
        public bool rightHandActive {
            get {
                return _cache.LookForValueInCache(_rightHandActive, entry => entry.rightHandActiveSet, entry => entry.rightHandActive);
            }
            set {
                if (rightHandActive == value) return;
                _cache.UpdateLocalCache(entry => { entry.rightHandActiveSet = true; entry.rightHandActive = value; return entry; });
                InvalidateReliableLength();
                FireRightHandActiveDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(RealtimeAvatarModel model, T value);
        public event PropertyChangedHandler<bool> headActiveDidChange;
        public event PropertyChangedHandler<bool> leftHandActiveDidChange;
        public event PropertyChangedHandler<bool> rightHandActiveDidChange;
        
        private struct LocalCacheEntry {
            public bool deviceTypeSet;
            public Normal.Realtime.RealtimeAvatar.DeviceType deviceType;
            public bool deviceModelSet;
            public string deviceModel;
            public bool headActiveSet;
            public bool headActive;
            public bool leftHandActiveSet;
            public bool leftHandActive;
            public bool rightHandActiveSet;
            public bool rightHandActive;
        }
        
        private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
        
        public enum PropertyID : uint {
            DeviceType = 2,
            DeviceModel = 3,
            HeadActive = 4,
            LeftHandActive = 5,
            RightHandActive = 6,
        }
        
        public RealtimeAvatarModel() : this(null) {
        }
        
        public RealtimeAvatarModel(RealtimeModel parent) : base(null, parent) {
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            UnsubscribeClearCacheCallback();
        }
        
        private void FireHeadActiveDidChange(bool value) {
            try {
                headActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireLeftHandActiveDidChange(bool value) {
            try {
                leftHandActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireRightHandActiveDidChange(bool value) {
            try {
                rightHandActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            int length = 0;
            if (context.fullModel) {
                FlattenCache();
                length += WriteStream.WriteVarint32Length((uint)PropertyID.DeviceType, (uint) _deviceType);
                length += WriteStream.WriteStringLength((uint)PropertyID.DeviceModel, _deviceModel);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.HeadActive, _headActive ? 1u : 0u);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.LeftHandActive, _leftHandActive ? 1u : 0u);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.RightHandActive, _rightHandActive ? 1u : 0u);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.deviceTypeSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.DeviceType, (uint) entry.deviceType);
                }
                if (entry.deviceModelSet) {
                    length += WriteStream.WriteStringLength((uint)PropertyID.DeviceModel, entry.deviceModel);
                }
                if (entry.headActiveSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.HeadActive, entry.headActive ? 1u : 0u);
                }
                if (entry.leftHandActiveSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.LeftHandActive, entry.leftHandActive ? 1u : 0u);
                }
                if (entry.rightHandActiveSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.RightHandActive, entry.rightHandActive ? 1u : 0u);
                }
            }
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var didWriteProperties = false;
            
            if (context.fullModel) {
                stream.WriteVarint32((uint)PropertyID.DeviceType, (uint) _deviceType);
                stream.WriteString((uint)PropertyID.DeviceModel, _deviceModel);
                stream.WriteVarint32((uint)PropertyID.HeadActive, _headActive ? 1u : 0u);
                stream.WriteVarint32((uint)PropertyID.LeftHandActive, _leftHandActive ? 1u : 0u);
                stream.WriteVarint32((uint)PropertyID.RightHandActive, _rightHandActive ? 1u : 0u);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.deviceTypeSet || entry.deviceModelSet || entry.headActiveSet || entry.leftHandActiveSet || entry.rightHandActiveSet) {
                    _cache.PushLocalCacheToInflight(context.updateID);
                    ClearCacheOnStreamCallback(context);
                }
                if (entry.deviceTypeSet) {
                    stream.WriteVarint32((uint)PropertyID.DeviceType, (uint) entry.deviceType);
                    didWriteProperties = true;
                }
                if (entry.deviceModelSet) {
                    stream.WriteString((uint)PropertyID.DeviceModel, entry.deviceModel);
                    didWriteProperties = true;
                }
                if (entry.headActiveSet) {
                    stream.WriteVarint32((uint)PropertyID.HeadActive, entry.headActive ? 1u : 0u);
                    didWriteProperties = true;
                }
                if (entry.leftHandActiveSet) {
                    stream.WriteVarint32((uint)PropertyID.LeftHandActive, entry.leftHandActive ? 1u : 0u);
                    didWriteProperties = true;
                }
                if (entry.rightHandActiveSet) {
                    stream.WriteVarint32((uint)PropertyID.RightHandActive, entry.rightHandActive ? 1u : 0u);
                    didWriteProperties = true;
                }
                
                if (didWriteProperties) InvalidateReliableLength();
            }
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                switch (propertyID) {
                    case (uint)PropertyID.DeviceType: {
                        _deviceType = (Normal.Realtime.RealtimeAvatar.DeviceType) stream.ReadVarint32();
                        break;
                    }
                    case (uint)PropertyID.DeviceModel: {
                        _deviceModel = stream.ReadString();
                        break;
                    }
                    case (uint)PropertyID.HeadActive: {
                        bool previousValue = _headActive;
                        _headActive = (stream.ReadVarint32() != 0);
                        bool headActiveExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.headActiveSet);
                        if (!headActiveExistsInChangeCache && _headActive != previousValue) {
                            FireHeadActiveDidChange(_headActive);
                        }
                        break;
                    }
                    case (uint)PropertyID.LeftHandActive: {
                        bool previousValue = _leftHandActive;
                        _leftHandActive = (stream.ReadVarint32() != 0);
                        bool leftHandActiveExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.leftHandActiveSet);
                        if (!leftHandActiveExistsInChangeCache && _leftHandActive != previousValue) {
                            FireLeftHandActiveDidChange(_leftHandActive);
                        }
                        break;
                    }
                    case (uint)PropertyID.RightHandActive: {
                        bool previousValue = _rightHandActive;
                        _rightHandActive = (stream.ReadVarint32() != 0);
                        bool rightHandActiveExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.rightHandActiveSet);
                        if (!rightHandActiveExistsInChangeCache && _rightHandActive != previousValue) {
                            FireRightHandActiveDidChange(_rightHandActive);
                        }
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
            }
        }
        
        #region Cache Operations
        
        private StreamEventDispatcher _streamEventDispatcher;
        
        private void FlattenCache() {
            _deviceType = deviceType;
            _deviceModel = deviceModel;
            _headActive = headActive;
            _leftHandActive = leftHandActive;
            _rightHandActive = rightHandActive;
            _cache.Clear();
        }
        
        private void ClearCache(uint updateID) {
            _cache.RemoveUpdateFromInflight(updateID);
        }
        
        private void ClearCacheOnStreamCallback(StreamContext context) {
            if (_streamEventDispatcher != context.dispatcher) {
                UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
            }
            _streamEventDispatcher = context.dispatcher;
            _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
        }
        
        private void UnsubscribeClearCacheCallback() {
            if (_streamEventDispatcher != null) {
                _streamEventDispatcher.RemoveStreamCallback(ClearCache);
                _streamEventDispatcher = null;
            }
        }
        
        #endregion
    }
}
/* ----- End Normal Autogenerated Code ----- */
